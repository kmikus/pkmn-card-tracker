generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Environment-specific configurations
// Development: DATABASE_URL=postgresql://dev_user:dev_password@localhost:5432/pkmn_tracker_dev
// Production: DATABASE_URL=postgresql://pkmn_card_tracker_db_user:<PASSWORD>@dpg-d1k1d7a4d50c738mvsu0-a.oregon-postgres.render.com/pkmn_card_tracker_db

// New cards table to store all card data (no user-specific data)
model cards {
  id              String          @id
  name            String?
  setname         String?
  image           String?
  data            String?         // JSON data from TCG API
  created_at      DateTime        @default(now())
  
  // New indexed fields for better query performance
  setId           String?         // Extracted from data::json->'set'->>'id'
  cardNumber      String?         // Extracted from data::json->>'number'
  cardNumberInt   Int?            // Numeric version of cardNumber for sorting
  
  user_collection user_collection[]
  card_tags       card_tags[]

  @@index([setId])
  @@index([cardNumber])
  @@index([cardNumberInt])
  @@map("cards")
}

// New sets table to store all set data from GitHub
model sets {
  id            String   @id
  name          String
  series        String
  printedTotal  Int
  total         Int
  ptcgoCode     String?
  releaseDate   String
  updatedAt     String
  symbol        String
  logo          String
  legalities    String?  // JSON string for legalities
  created_at    DateTime @default(now())

  @@map("sets")
}

// Junction table for user ownership of cards
model user_collection {
  userid      String
  cardid      String
  quantity    Int              @default(1)
  added_at    DateTime         @default(now())
  user        users            @relation(fields: [userid], references: [id], onDelete: Cascade)
  card        cards            @relation(fields: [cardid], references: [id], onDelete: Cascade)

  @@id([userid, cardid])
  @@map("user_collection")
}

// Keep existing collection table for now (will be dropped after migration)
model collection {
  id         String
  userid     String
  name       String?
  setname    String?
  image      String?
  data       String?
  created_at DateTime @default(now())
  users      users    @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([id, userid])
}

model test_table {
  id         Int       @id @default(autoincrement())
  name       String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model users {
  id             String           @id
  displayname    String?
  email          String?
  created_at     DateTime         @default(now())
  collection     collection[]     // Old collection table
  user_collection user_collection[] // New user_collection table
  tags           tags[]
}

model tags {
  id         Int        @id @default(autoincrement())
  name       String
  userid     String
  color      String?    @default("#3B82F6")
  created_at DateTime   @default(now())
  user       users      @relation(fields: [userid], references: [id])
  card_tags  card_tags[]

  @@unique([name, userid])
  @@map("tags")
}

// Updated card_tags to reference cards table instead of collection
model card_tags {
  card_id    String
  userid     String
  tag_id     Int
  created_at DateTime @default(now())
  card       cards    @relation(fields: [card_id], references: [id], onDelete: Cascade)
  tag        tags     @relation(fields: [tag_id], references: [id])

  @@id([card_id, userid, tag_id])
  @@map("card_tags")
}
